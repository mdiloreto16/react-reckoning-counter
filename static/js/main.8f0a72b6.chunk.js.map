{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","fab","margin","extendedIcon","marginRight","spacing","App","useState","ghCount","updateGhCount","srCount","updateSrCount","bobCount","updateBobCount","ouCount","updateOuCount","ddCount","updateDdCount","totalCount","updateTotalCount","noWeaponsCount","updateNoWeaponsCount","countRef","firebase","database","ref","child","useEffect","once","then","snap","val","dbObject","Fragment","Typography","variant","style","paddingLeft","paddingTop","Grid","container","Table","tableLayout","width","marginLeft","marginTop","TableHead","TableRow","TableCell","size","TableBody","Button","onClick","padding","Number","toFixed","update","dataObj","saveAll","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f0a72b6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Grid, Typography, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport firebase from 'firebase';\n\nconst useStyles = makeStyles(theme => ({\n  fab: {\n    margin: 12,\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n  var obj;\n  var ghVar;\n  let ghCountVar, srCountVar, bobCountVar, ouCountVar, ddCountVar, totalCountVar, noWeaponsCountVar;\n\n  const [ghCount, updateGhCount] = useState(0);\n  const [srCount, updateSrCount] = useState(0);\n  const [bobCount, updateBobCount] = useState(0);\n  const [ouCount, updateOuCount] = useState(0);\n  const [ddCount, updateDdCount] = useState(0);\n  const [totalCount, updateTotalCount] = useState(0);\n  const [noWeaponsCount, updateNoWeaponsCount] = useState(0);\n\n  var countRef = firebase.database().ref().child('counts');\n\n  useEffect(() => {\n    countRef.once('value').then(function (snap) {\n      obj = snap.val();\n      updateGhCount(snap.val().ghCount);\n      updateSrCount(snap.val().srCount);\n      updateBobCount(snap.val().bobCount);\n      updateOuCount(snap.val().ouCount);\n      updateDdCount(snap.val().ddCount);\n      updateTotalCount(snap.val().totalCount);\n      updateNoWeaponsCount(snap.val().noWeaponsCount);\n    });\n  }, []);\n\n  function clearAll() {\n    updateGhCount(0);\n    updateSrCount(0);\n    updateBobCount(0);\n    updateOuCount(0);\n    updateDdCount(0);\n    updateTotalCount(0);\n    updateNoWeaponsCount(0);\n\n    countRef.update(dbObject);\n  }\n\n  var dbObject = {\n    ghCount: ghCount,\n    srCount: srCount,\n    bobCount: bobCount,\n    ouCount: ouCount,\n    ddCount: ddCount,\n    totalCount: totalCount,\n    noWeaponsCount: noWeaponsCount\n  }\n\n  function saveAll(dataObj) {\n    if(dataObj.ghCount === 0 && dataObj.srCount === 0 && dataObj.bobCount === 0 && dataObj.ouCount === 0 && dataObj.ddCount == 0 && dataObj.totalCount === 0 && dataObj.noWeaponsCount === 0){\n      let varVar = 0;\n    }\n    else{\n    countRef.update(dataObj);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h3\" style={{ paddingLeft: \"40px\", paddingTop: \"40px\" }}>\n        Drop Rate Percent Counter\n      </Typography>\n      <Grid container spacing={5}>\n        <Grid container>\n          <Table style={{ tableLayout: 'fixed', width: 920, marginLeft: 72, marginTop: 72 }}>\n            <TableHead>\n              <TableRow>\n                <TableCell size=\"small\">\n                  <Typography>\n                    Weapon Type\n                  </Typography>\n                </TableCell>\n                <TableCell size=\"small\">\n                  <Typography>\n                    Add Count\n                  </Typography>\n                </TableCell>\n                <TableCell size=\"small\">\n                  <Typography>\n                    Drops Recieved\n                  </Typography>\n                </TableCell>\n                <TableCell size=\"small\">\n                  <Typography>\n                    Drop Rate (%)\n                  </Typography>\n                </TableCell>\n                <TableCell size=\"small\">\n                  <Typography>\n                    Clear Counter\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  Gnawing Hunger\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateGhCount(ghCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {ghCount}\n              </TableCell>\n              <TableCell>\n                {Number((ghCount/totalCount)*100).toFixed(2)}\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateGhCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  Spare Rations\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateSrCount(srCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {srCount}\n              </TableCell>\n              <TableCell>\n                {Number((srCount/totalCount)*100).toFixed(2)}\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateSrCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  Bug-out Bag\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateBobCount(bobCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {bobCount}\n              </TableCell>\n              <TableCell>\n                {Number((bobCount/totalCount)*100).toFixed(2)}\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateBobCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  Outlast\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateOuCount(ouCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {ouCount}\n              </TableCell>\n              <TableCell>\n                {Number((ouCount/totalCount)*100).toFixed(2)}\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateOuCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  Doomsday\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateDdCount(ddCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {ddCount}\n              </TableCell>\n              <TableCell>\n                {Number((ddCount/totalCount)*100).toFixed(2)}\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateDdCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  No Weapons\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateNoWeaponsCount(noWeaponsCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {noWeaponsCount}\n              </TableCell>\n              <TableCell>\n                {Number((noWeaponsCount/totalCount)*100).toFixed(2)}\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateNoWeaponsCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            <TableRow >\n              <TableCell>\n                <Typography>\n                  Total Clears\n                </Typography>\n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateTotalCount(totalCount+1)}>\n                  Add\n                </Button>\n              </TableCell>\n              <TableCell style={{ padding: '4px 16px' }}>\n                {totalCount}\n              </TableCell>\n              <TableCell>\n                \n              </TableCell>\n              <TableCell size={'small'}>\n                <Button variant=\"contained\" onClick={() => updateTotalCount(0)}>\n                  Clear\n                </Button>\n              </TableCell>\n            </TableRow>\n            </TableBody>\n          </Table>\n        </Grid>\n        <Button variant=\"contained\" onClick={clearAll} style={{ marginLeft: 72, marginTop: 20 }}>\n            Clear All Fields\n        </Button>\n        <Button variant=\"contained\" onClick={saveAll(dbObject)} style={{ marginLeft: 72, marginTop: 20 }}>\n            Save to DB\n        </Button>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBA8kRXqKFqLXuZ1xK28Lgle4vsqa9Wly0\",\n    authDomain: \"farming-counter-2.firebaseapp.com\",\n    databaseURL: \"https://farming-counter-2.firebaseio.com\",\n    projectId: \"farming-counter-2\",\n    storageBucket: \"farming-counter-2.appspot.com\",\n    messagingSenderId: \"689972728745\",\n    appId: \"1:689972728745:web:9f422ed5b8f337d6176ab8\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}